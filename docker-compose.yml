version: '3.2'
services:
  redis-master:
    image: dge/redis:5
    ports:
      - 6379:6379
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.redis-master == true
      restart_policy:
        condition: on-failure
    networks:
      - redis

  redis-slave:
    image: dge/redis:5
    command: --slaveof redis-master 6379
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.redis-replica == true
      restart_policy:
        condition: on-failure
    networks:
      - redis

  redis-sentinel:
    image: dge/redis-sentinel:5
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.redis-sentinel == true
      restart_policy:
        condition: on-failure
    environment:
      - "SENTINEL_MASTER_IP=redis-master"
    networks:
      - redis


  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.zookeeper == true
      restart_policy:
        condition: on-failure
    networks:
      - redis

  kafka:
    image: wurstmeister/kafka:2.12-2.4.1
    ports:
      - 9094:9094
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - redis


  spring:
    image: dge/spring:1.0
    ports:
      - 8080:8080
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.labels.spring == true
      restart_policy:
        condition: on-failure
    networks:
      - redis

networks:
  redis:
    driver: overlay